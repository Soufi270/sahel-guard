const { Vonage } = require('@vonage/server-sdk');
const { TwilioSmsService } = require('./sms-service-twilio');

// Service SMS utilisant Vonage
class VonageSmsService {
    constructor() {
        this.apiKey = process.env.VONAGE_API_KEY;
        this.apiSecret = process.env.VONAGE_API_SECRET;
        this.senderNumber = process.env.VONAGE_SENDER_NUMBER; // Le num√©ro fourni par Vonage
        this.vonage = null;

        if (this.apiKey && this.apiSecret && this.senderNumber) {
            this.isConfigured = true;
            this.vonage = new Vonage({
                apiKey: this.apiKey,
                apiSecret: this.apiSecret
            });
            console.log('üì± Service SMS Vonage configur√© et activ√©.');
        } else {
            this.isConfigured = false;
            console.log('‚ö†Ô∏è Service SMS non configur√© (credentials Vonage manquants).');
        }
    }

    // Envoi r√©el via Vonage
    async send(phoneNumber, message) {
        // La v√©rification est d√©j√† faite dans sendAlertSms via isConfigured
        try {
            console.log(`üì≤ Tentative envoi via Vonage √† ${phoneNumber}`);
            // Le num√©ro doit √™tre au format E.164 complet (avec le '+') pour le SDK Vonage.
            const to = phoneNumber;
            const from = this.senderNumber;
            const text = message;
            
            const response = await this.vonage.sms.send({ to, from, text });
            
            if (response.messages[0].status === '0') {
                console.log(`‚úÖ SMS envoy√© avec succ√®s √† ${to}`);
                return { success: true, provider: 'vonage', simulated: false };
            } else {
                const errorDetails = response.messages[0];
                const errorMessage = `√âchec envoi SMS (Code: ${errorDetails.status}) - ${errorDetails['error-text']}`;
                throw new Error(errorMessage);
            }
        } catch (error) {
            // Si l'erreur vient du SDK, elle aura une propri√©t√© 'response'
            let errorMessage = error.message;
            if (error.response && error.response.data) {
                errorMessage = JSON.stringify(error.response.data);
            }
            // On relance une erreur qui sera captur√©e par le SmsManager
            // et qui contiendra le message d√©taill√©.
            throw new Error(errorMessage);
        }
    }
}

/**
 * Classe principale qui g√®re les services SMS avec une logique de fallback.
 */
class SmsManager {
    constructor() {
        this.providers = [];
        const vonageService = new VonageSmsService();
        if (vonageService.isConfigured) {
            this.providers.push(vonageService);
        }
        const twilioService = new TwilioSmsService();
        if (twilioService.isConfigured) {
            this.providers.push(twilioService);
        }
        console.log(`üì± Gestionnaire SMS initialis√© avec ${this.providers.length} fournisseur(s).`);
    }

    async sendAlertSms(alertData, phoneNumbers) {
        if (this.providers.length === 0) {
            console.log('‚ö†Ô∏è Aucun fournisseur SMS n\'est configur√©. Aucun envoi.');
            return phoneNumbers.map(pn => ({ phoneNumber: pn, success: false, error: 'No SMS provider configured' }));
        }

        if (!phoneNumbers || phoneNumbers.length === 0) {
            console.log('‚ö†Ô∏è Aucun num√©ro √† notifier.');
            return [];
        }

        const message = this.formatAlertMessage(alertData);
        const results = [];

        for (const phoneNumber of phoneNumbers) {
            const formattedNumber = this.formatMaliPhoneNumber(phoneNumber);
            let sent = false;
            for (const provider of this.providers) {
                try {
                    const result = await provider.send(formattedNumber, message);
                    results.push({ phoneNumber, ...result });
                    sent = true;
                    break; // Succ√®s, on passe au num√©ro suivant
                } catch (error) {
                    console.error(`‚ùå √âchec de l'envoi avec ${provider.constructor.name} √† ${formattedNumber}: ${error.message}`);
                    // On ne fait rien, la boucle va essayer le prochain fournisseur
                }
            }
            if (!sent) {
                results.push({ phoneNumber, success: false, error: 'All SMS providers failed' });
            }
        }
        return results;
    }
    
    // Formatage du message d'alerte
    formatAlertMessage(alertData) {
        const emojis = {
            high: 'üö®',
            critical: 'üî•',
            medium: '‚ö†Ô∏è',
            low: 'üìã'
        };

        const emoji = emojis[alertData.severity] || '‚ö†Ô∏è';
        
        return `${emoji} ALERTE SAHEL GUARD ${emoji}
        
Type: ${alertData.type}
Niveau: ${alertData.severity.toUpperCase()}
Source: ${alertData.source}
Lieu: ${alertData.location}

${alertData.description}

üïí ${new Date().toLocaleString('fr-FR')}

‚û°Ô∏è Contacter l'admin r√©seau si n√©cessaire`;
    }

    // Formatage des num√©ros maliens
    formatMaliPhoneNumber(phoneNumber) {
        // 1. Nettoyage de tout ce qui n'est pas un chiffre
        let cleaned = phoneNumber.replace(/\D/g, '');
        
        // 2. G√©rer les pr√©fixes internationaux (ex: 00223...)
        if (cleaned.startsWith('00223')) {
            cleaned = cleaned.substring(2); // Retire le '00' pour obtenir '223...'
        }
        
        // 3. G√©rer les num√©ros locaux (ex: 06..., 07...)
        if (cleaned.length === 9 && cleaned.startsWith('0')) {
            cleaned = '223' + cleaned.substring(1); // Remplace le '0' par '223'
        }
        
        // 4. Si le num√©ro a 8 chiffres, on suppose que c'est un num√©ro malien sans indicatif
        if (cleaned.length === 8) {
            cleaned = '223' + cleaned; // Ajoute l'indicatif '223'
        }
        
        // 5. Retourne le num√©ro au format E.164
        return `+${cleaned}`;
    }

    // V√©rification de la validit√© d'un num√©ro malien
    isValidMaliNumber(phoneNumber) {
        const cleaned = phoneNumber.replace(/\D/g, '');
        
        // Formats accept√©s: 223XXXXXXXXX, 0XXXXXXXXX, XXXXXXXXX
        const regex = /^(223|0)?[67]\d{7}$/;
        return regex.test(cleaned);
    }
}

// Singleton du service SMS
let smsService = null;

function getSmsService() {
    if (!smsService) {
        smsService = new SmsManager();
    }
    return smsService;
}

module.exports = {
    getSmsService
};